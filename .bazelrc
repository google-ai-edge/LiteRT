# LiteRT Bazel configuration file.
# This file tries to group and simplify build options for LiteRT
#
# ----CONFIG OPTIONS----
# Android options:
#    android:
#    android_arm:
#    android_arm64:
#    android_x86:
#    android_x86_64:
#
# iOS options:
#     ios:
#     ios_armv7:
#     ios_arm64:
#     ios_x86_64:
#     ios_fat:
#
# Macosx options
#     darwin_arm64:
#
# Compiler options:
#     avx_linux:              Build with avx instruction set on linux.
#     avx_win:                Build with avx instruction set on windows
#
# Other build options:
#     short_logs:       Only log errors during build, skip warnings.
#     verbose_logs:     Show all compiler warnings during build.
#     monolithic:       Build all TF C++ code into a single shared object.
#     dynamic_kernels:  Try to link all kernels dynamically (experimental).
#     dbg:              Build with debug info
#
# TF version options;
#     v2: Build TF v2
#
# Embedded Linux options (experimental and only tested with TFLite build yet)
#     elinux:          General Embedded Linux options shared by all flavors.
#     elinux_aarch64:  Embedded Linux options for aarch64 (ARM64) CPU support.
#     elinux_armhf:    Embedded Linux options for armhf (ARMv7) CPU support.
#
# Default build options. These are applied first and unconditionally.

common --incompatible_enable_cc_toolchain_resolution
common --repo_env USE_HERMETIC_CC_TOOLCHAIN=1

# TODO: Migrate for https://github.com/bazelbuild/bazel/issues/7260
common:clang_local --noincompatible_enable_cc_toolchain_resolution
common:clang_local --noincompatible_enable_android_toolchain_resolution
common:clang_local --@rules_ml_toolchain//common:enable_hermetic_cc=False
common:clang_local --repo_env USE_HERMETIC_CC_TOOLCHAIN=0

common --repo_env=USE_PYWRAP_RULES=True
common --copt=-DGRPC_BAZEL_BUILD
common --cxxopt=-std=gnu++17
common --host_copt=-DGRPC_BAZEL_BUILD
common --action_env=GRPC_BAZEL_RUNTIME=1
common --repo_env=PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=upb
common --action_env=PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=upb

# Some targets have the same py source file, but use different
# configurations via `requires-` tags. This results in an action
# conflict when precompiling. Disable to avoid that problem.
# See https://github.com/bazel-contrib/rules_python/issues/2445
common --@rules_python//python/config_settings:precompile=force_disabled

# Do not do this. This is how gRPC builds itself by default, but we don't want
# that as it would link protobuf into its own set of dynamic libraries, which
# would conflict with our protobuf linkage.
#common --define=use_fast_cpp_protos=true

# For projects which use TensorFlow as part of a Bazel build process, putting
# nothing in a bazelrc will default to a monolithic build. The following line
# opts in to modular op registration support by default.
common --define framework_shared_object=true
common --define tsl_protobuf_header_only=true

common --define=allow_oversize_protos=true

common --spawn_strategy=standalone
common -c opt

# Make Bazel print out all options from rc files.
common --announce_rc

# TODO(mihaimaruseac): Document this option or remove if no longer needed
common --define=grpc_no_ares=true

# See https://github.com/bazelbuild/bazel/issues/7362 for information on what
# --incompatible_remove_legacy_whole_archive flag does.
# This flag is set to true in Bazel 1.0 and newer versions. We tried to migrate
# Tensorflow to the default, however test coverage wasn't enough to catch the
# errors.
# There is ongoing work on Bazel team's side to provide support for transitive
# shared libraries. As part of migrating to transitive shared libraries, we
# hope to provide a better mechanism for control over symbol exporting, and
# then tackle this issue again.
#
# TODO: Remove the following two lines once TF doesn't depend on Bazel wrapping
# all library archives in -whole_archive -no_whole_archive.
common --noincompatible_remove_legacy_whole_archive
common --features=-force_no_whole_archive
common --host_features=-force_no_whole_archive

# TODO(mihaimaruseac): Document this option or remove if no longer needed
common --enable_platform_specific_config

# Enable XLA support by default.
common --define=with_xla_support=true

# TODO(mihaimaruseac): Document this option or remove if no longer needed
common --config=short_logs

# TF now has `cc_shared_library` targets, so it needs the experimental flag
# TODO(rostam): Remove when `cc_shared_library` is enabled by default
common --experimental_cc_shared_library

# cc_shared_library ensures no library is linked statically more than once.
common --experimental_link_static_libraries_once=false

# Prevent regressions on those two incompatible changes
# TODO: remove those flags when they are flipped in the default Bazel version TF uses.
common --incompatible_enforce_config_setting_visibility
# TODO: also enable this flag after fixing the visibility violations
# build --incompatible_config_setting_private_default_visibility

# Default options should come above this line.

# Android configs. Bazel needs to have --cpu and --fat_apk_cpu both set to the
# target CPU to build transient dependencies correctly. See
# https://docs.bazel.build/versions/master/user-manual.html#flag--fat_apk_cpu
common:android --config=clang_local
common:android --crosstool_top=//external:android/crosstool
common:android --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
common:android_arm --config=android
common:android_arm --cpu=armeabi-v7a
common:android_arm --fat_apk_cpu=armeabi-v7a
common:android_arm --platforms=@org_tensorflow//tensorflow/tools/toolchains/android:armeabi-v7a
common:android_arm64 --config=android
common:android_arm64 --cpu=arm64-v8a
common:android_arm64 --fat_apk_cpu=arm64-v8a
common:android_arm64 --platforms=@org_tensorflow//tensorflow/tools/toolchains/android:arm64-v8a
common:android_x86 --config=android
common:android_x86 --cpu=x86
common:android_x86 --fat_apk_cpu=x86
common:android_x86 --platforms=@org_tensorflow//tensorflow/tools/toolchains/android:x86
common:android_x86_64 --config=android
common:android_x86_64 --cpu=x86_64
common:android_x86_64 --fat_apk_cpu=x86_64
common:android_x86_64 --platforms=@org_tensorflow//tensorflow/tools/toolchains/android:x86_64

# Build everything statically for Android since all static libs are later
# bundled together into a single .so for deployment.
common:android --dynamic_mode=off
# TODO(belitskiy): Remove once on Clang 20.
common:android --define=xnn_enable_avxvnniint8=false

# Sets the default Apple platform to macOS.
common:macos --apple_platform_type=macos

# gRPC on MacOS requires this #define
common:macos --copt=-DGRPC_BAZEL_BUILD

# Avoid hitting command line argument limit
common:macos --features=archive_param_file

# Bazel 7.0.0 no longer supports dynamic symbol lookup on macOS. To resolve
# undefined symbol errors in macOS arm64 builds, explicitly add the necessary
# linker flags until dependencies are well defined. See
# https://github.com/bazelbuild/bazel/issues/19730.
common:macos --linkopt=-Wl,-undefined,dynamic_lookup
common:macos --host_linkopt=-Wl,-undefined,dynamic_lookup

# Use the Apple toolchain for MacOS builds.
common:macos --config=apple-toolchain

# Use cc toolchains from apple_support for Apple builds (ios, macos, etc).
# https://github.com/bazelbuild/apple_support/tree/master?tab=readme-ov-file#bazel-6-setup
common:apple-toolchain --config=clang_local
common:apple-toolchain --apple_crosstool_top=@local_config_apple_cc//:toolchain
common:apple-toolchain --crosstool_top=@local_config_apple_cc//:toolchain
common:apple-toolchain --host_crosstool_top=@local_config_apple_cc//:toolchain

# Settings for MacOS on ARM CPUs.
common:macos_arm64 --config=macos
common:macos_arm64 --cpu=darwin_arm64
common:macos_arm64 --cxxopt=-std=gnu++17
common:macos_arm64 --macos_minimum_os=11.0
common:macos_arm64 --platforms=@build_bazel_apple_support//configs/platforms:darwin_arm64

# iOS configs for each architecture and the fat binary builds.
common:ios --apple_platform_type=ios
common:ios --copt=-fembed-bitcode
common:ios --copt=-Wno-c++11-narrowing
common:ios --config=apple-toolchain
common:ios_armv7 --config=ios
common:ios_armv7 --cpu=ios_armv7
common:ios_armv7 --platforms=@org_tensorflow//tensorflow/tools/toolchains/ios:ios_armv7
common:ios_arm64 --config=ios
common:ios_arm64 --cpu=ios_arm64
common:ios_arm64 --platforms=@build_bazel_apple_support//configs/platforms:ios_arm64
common:ios_arm64e --config=ios
common:ios_arm64e --cpu=ios_arm64e
common:ios_arm64e --platforms=@build_bazel_apple_support//configs/platforms:ios_arm64e
common:ios_sim_arm64 --config=ios
common:ios_sim_arm64 --cpu=ios_sim_arm64
common:ios_sim_arm64 --platforms=@build_bazel_apple_support//configs/platforms:ios_sim_arm64
common:ios_x86_64 --config=ios
common:ios_x86_64 --cpu=ios_x86_64
common:ios_x86_64 --platforms=@build_bazel_apple_support//configs/platforms:ios_x86_64
common:ios_fat --config=ios
common:ios_fat --ios_multi_cpus=armv7,arm64,i386,x86_64

# Config to use a mostly-static build and disable modular op registration
# support (this will revert to loading TensorFlow with RTLD_GLOBAL in Python).
# By default, TensorFlow will build with a dependence on
# //tensorflow:libtensorflow_framework.so.
common:monolithic --define framework_shared_object=false
common:monolithic --define tsl_protobuf_header_only=false
common:monolithic --experimental_link_static_libraries_once=false  # b/229868128

# Debug config
common:dbg -c dbg
# Only include debug info for files under tensorflow/, excluding kernels, to
# reduce the size of the debug info in the binary. This is because if the debug
# sections in the ELF binary are too large, errors can occur. See
# https://github.com/tensorflow/tensorflow/issues/48919.
# Users can still include debug info for a specific kernel, e.g. with:
#     --config=dbg --per_file_copt=+tensorflow/core/kernels/identity_op.*@-g
# Since this .bazelrc file is synced between the tensorflow/tensorflow repo and
# the openxla/xla repo, also include debug info for files under xla/.
common:dbg --per_file_copt=+.*,-tensorflow.*,-xla.*@-g0
common:dbg --per_file_copt=+tensorflow/core/kernels.*@-g0
# for now, disable arm_neon. see: https://github.com/tensorflow/tensorflow/issues/33360
common:dbg --cxxopt -DTF_LITE_DISABLE_X86_NEON
# AWS SDK must be compiled in release mode. see: https://github.com/tensorflow/tensorflow/issues/37498
common:dbg --copt -DDEBUG_BUILD

# Options to disable default on features
common:nogcp --define=no_gcp_support=true
common:nonccl --define=no_nccl_support=true

# Modular TF build options
common:dynamic_kernels --define=dynamic_loaded_kernels=true
common:dynamic_kernels --copt=-DAUTOLOAD_DYNAMIC_KERNELS

# Don't trigger --config=<host platform> when cross-compiling.
common:android --noenable_platform_specific_config
common:ios --noenable_platform_specific_config

# Suppress all C++ compiler warnings, otherwise build logs become 10s of MBs.
common:android --copt=-w
common:ios --copt=-w
common:linux --host_copt=-w
common:macos --copt=-w
# Suppress all C++ compiler warnings on Windows
common:windows --copt=/W0
common:windows --host_copt=/W0

# Suppress most C++ compiler warnings to reduce log size but allow
# for specific warnings to still be present.
common:linux --copt="-Wno-all"
common:linux --copt="-Wno-extra"
common:linux --copt="-Wno-deprecated"
common:linux --copt="-Wno-deprecated-declarations"
common:linux --copt="-Wno-ignored-attributes"
common:linux --copt="-Wno-array-bounds"

# Windows-specific Python configuration
common:windows --repo_env=HERMETIC_PYTHON_VERSION=3.11
common:windows --action_env=PYTHON_BIN_PATH="C:/Program Files/Python311/python.exe"
common:windows --python_path="C:/Program Files/Python311/python.exe"

# Add unused-result as an error on Linux.
common:linux --copt="-Wunused-result"
common:linux --copt="-Werror=unused-result"
# Add switch as an error on Linux.
common:linux --copt="-Wswitch"
common:linux --copt="-Werror=switch"
# This was added in clang-16 by https://reviews.llvm.org/D133574.
# Can be removed once upb is updated, since a type definition is used within
# offset of in the current version of ubp.
# See https://github.com/protocolbuffers/upb/blob/9effcbcb27f0a665f9f345030188c0b291e32482/upb/upb.c#L183.
common:linux --copt=-Wno-gnu-offsetof-extensions


# Toolchain and CUDA options for Linux CPU builds
# TODO: Below config is not needed please don't use it and remove it.
common:release_cpu_linux --incompatible_enable_cc_toolchain_resolution
#common:release_cpu_linux --config=clang_local
#common:release_cpu_linux --crosstool_top="@local_config_cuda//crosstool:toolchain"
#common:release_cpu_linux --repo_env=TF_SYSROOT="/dt9"

# Linux ARM64 specific options
common:linux_arm64 --copt="-mtune=generic" --copt="-march=armv8-a" --copt="-O3"

# Windows pthreadpool configuration
# On Windows, set /std:c11 and /experimental:c11atomics for pthreadpool.
common:windows --conlyopt=/std:c11
common:windows --host_conlyopt=/std:c11
common:windows --copt=/experimental:c11atomics
common:windows --conlyopt=/experimental:c11atomics
common:windows --host_conlyopt=/experimental:c11atomics
common:windows --per_file_copt=external/pthreadpool/.*@-std=c11
common:windows --per_file_copt=external/pthreadpool/_*@/D_CRT_SECURE_NO_WARNINGS

# Force include MSVC compatibility header for litert files
common:windows --per_file_copt=external/litert/.*@/FI"C:/BuildTools/LiteRT-LM/msvc_compat.h"


# On Windows, `__cplusplus` is wrongly defined without this switch
# See https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
common:windows --copt=/Zc:__cplusplus
common:windows --host_copt=/Zc:__cplusplus

# Tensorflow uses M_* math constants that only get defined by MSVC headers if
# _USE_MATH_DEFINES is defined.
common:windows --copt=/D_USE_MATH_DEFINES
common:windows --host_copt=/D_USE_MATH_DEFINES

# Windows has a relatively short command line limit, which TF has begun to hit.
# See https://docs.bazel.build/versions/main/windows.html
common:windows --features=compiler_param_file
common:windows --features=archive_param_file

# Speed Windows compile times. Available in VS 16.4 (we are on 16.11). See
# https://groups.google.com/a/tensorflow.org/d/topic/build/SsW98Eo7l3o/discussion
common:windows --copt=/d2ReducedOptimizeHugeFunctions
common:windows --host_copt=/d2ReducedOptimizeHugeFunctions

# Before VS 2017 15.8, the member "type" would non-conformingly have an
# alignment of only alignof(max_align_t). VS 2017 15.8 was fixed to handle this
# correctly, but the fix inherently changes layout and breaks binary
# compatibility (*only* for uses of aligned_storage with extended alignments).
common:windows --copt=-D_ENABLE_EXTENDED_ALIGNED_STORAGE
common:windows --host_copt=-D_ENABLE_EXTENDED_ALIGNED_STORAGE

# Enable the runfiles symlink tree on Windows. This makes it possible to build
# the pip package on Windows without an intermediate data-file archive, as the
# build_pip_package script in its current form (as of Aug 2023) uses the
# runfiles symlink tree to decide what to put into the Python wheel.
startup --windows_enable_symlinks
common:windows --enable_runfiles

# Default paths for TF_SYSTEM_LIBS
common:linux --define=PREFIX=/usr
common:linux --define=LIBDIR=$(PREFIX)/lib
common:linux --define=INCLUDEDIR=$(PREFIX)/include
common:linux --define=PROTOBUF_INCLUDE_PATH=$(PREFIX)/include
common:macos --define=PREFIX=/usr
common:macos --define=LIBDIR=$(PREFIX)/lib
common:macos --define=INCLUDEDIR=$(PREFIX)/include
common:macos --define=PROTOBUF_INCLUDE_PATH=$(PREFIX)/include
# TF_SYSTEM_LIBS do not work on windows.

# By default, build TF in C++ 17 mode.
common:android --cxxopt=-std=c++17
common:android --host_cxxopt=-std=c++17
common:ios --cxxopt=-std=c++17
common:ios --host_cxxopt=-std=c++17
common:linux --cxxopt=-std=c++17
common:linux --host_cxxopt=-std=c++17
common:macos --cxxopt=-std=c++17
common:macos --host_cxxopt=-std=c++17
common:macos_arm64 --cxxopt=-std=c++17
common:macos_arm64 --host_cxxopt=-std=c++17
common:windows --cxxopt=/std:c++20
common:windows --host_cxxopt=/std:c++20

# On windows, we still link everything into a single DLL.
common:windows --config=monolithic

# On linux, we dynamically link small amount of kernels
common:linux --config=dynamic_kernels

# Make sure to include as little of windows.h as possible
common:windows --copt=-DWIN32_LEAN_AND_MEAN
common:windows --host_copt=-DWIN32_LEAN_AND_MEAN
common:windows --copt=-DNOGDI
common:windows --host_copt=-DNOGDI

# MSVC (Windows): Standards-conformant preprocessor mode
# See https://docs.microsoft.com/en-us/cpp/preprocessor/preprocessor-experimental-overview
common:windows --copt=/Zc:preprocessor
common:windows --host_copt=/Zc:preprocessor

# Misc build options we need for windows.
common:windows --linkopt=/DEBUG
common:windows --host_linkopt=/DEBUG
common:windows --linkopt=/OPT:REF
common:windows --host_linkopt=/OPT:REF
common:windows --linkopt=/OPT:ICF
common:windows --host_linkopt=/OPT:ICF

# Force local execution for genrules on Windows
common:windows --strategy=Genrule=local
common:windows --genrule_strategy=local
common:windows --spawn_strategy=local

# Use Git Bash for genrules
common:windows --shell_executable="C:/Program Files/Git/bin/bash.exe"

# Verbose failure logs when something goes wrong
common:windows --verbose_failures

# Work around potential issues with large command lines on windows.
# See: https://github.com/bazelbuild/bazel/issues/5163
common:windows --features=compiler_param_file

# Disable problematic features on Windows
common:windows --define=tflite_with_xnnpack=false

# Minimal build configuration
common:windows --define=build_with_mkl=false
common:windows --define=build_with_openmp=false

# Do not risk cache corruption. See:
# https://github.com/bazelbuild/bazel/issues/3360
common:linux --experimental_guard_against_concurrent_changes

# Configure short or long logs
common:short_logs --output_filter=DONT_MATCH_ANYTHING
common:verbose_logs --output_filter=

# Instruction set optimizations
# TODO(gunan): Create a feature in toolchains for avx/avx2 to
#   avoid having to define linux/win separately.
common:avx_linux --copt=-mavx
common:avx_linux --host_copt=-mavx
common:avx_win --copt=/arch:AVX

# Enable all targets in XLA
common:cpu_cross --define=with_cross_compiler_support=true

# Disable XLA on mobile.
common:xla     --define=with_xla_support=true # TODO: remove, it's on by default.
common:android --define=with_xla_support=false
common:ios     --define=with_xla_support=false

# Flag to enable remote config
common --experimental_repo_remote_exec

# TFLite build configs for generic embedded Linux
common:elinux --config=clang_local
common:elinux --crosstool_top=@local_config_embedded_arm//:toolchain
common:elinux --host_crosstool_top=@bazel_tools//tools/cpp:toolchain
common:elinux_aarch64 --config=elinux
common:elinux_aarch64 --cpu=aarch64
common:elinux_aarch64 --platforms=@org_tensorflow//tensorflow/tools/toolchains/linux:linux_aarch64
common:elinux_armhf --config=elinux
common:elinux_armhf --cpu=armhf
common:elinux_armhf --platforms=@org_tensorflow//tensorflow/tools/toolchains/linux:linux_armhf
common:elinux_armhf --copt -mfp16-format=ieee

# Config-specific options should come above this line.

# Load rc file written by ./configure.
# Fail on missing litert configure. It must exist for clang to be properly configured.
import %workspace%/.litert_configure.bazelrc
try-import %workspace%/xla_configure.bazelrc

# Load rc file with user-specific options.
try-import %workspace%/.bazelrc.user

# Try to load the XLA warnings config if available
try-import %workspace%/warnings.bazelrc

# Options to build TensorFlow 1.x or 2.x.
common:v2 --define=tf_api_version=2 --action_env=TF2_BEHAVIOR=1
common --config=v2

# Options to filter filepath prefixes when generating python api's
common:litert_prefixes --define=litert_prefixes="external/org_tensorflow/"
common --config=litert_prefixes

# Disables generating api v2 under the submodule tensorflow/lite/python.
common --define=disable_tf_lite_py=true

# Config to use a gcs bucket as remote cache.
common:public_cache --remote_cache="https://storage.googleapis.com/litert-bazel-artifacts" --remote_upload_local_results=false

# Cache pushes are limited to CI system.
# WARNING: THIS OPTION WONT WORK IF YOU DO NOT HAVE PROPER AUTHENTICATION AND PERMISSIONS
common:public_cache_push --config=public_cache --remote_upload_local_results=true --google_default_credentials

# BEGIN LITERT REMOTE BUILD EXECUTION OPTIONS
# WARNING: THESE OPTIONS WONT WORK IF YOU DO NOT HAVE PROPER AUTHENTICATION AND PERMISSIONS

# Allow creation of resultstore URLs for any bazel invocation
common:resultstore --google_default_credentials
common:resultstore --bes_backend=buildeventservice.googleapis.com
common:resultstore --bes_instance_name="tensorflow-testing"
common:resultstore --bes_results_url="https://source.cloud.google.com/results/invocations"
common:resultstore --bes_timeout=600s

# Flag to enable remote config
common --experimental_repo_remote_exec

# Make Bazel not try to probe the host system for a C++ toolchain.
common:rbe_base --config=resultstore
common:rbe_base --repo_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
common:rbe_base --define=EXECUTOR=remote
common:rbe_base --jobs=200
common:rbe_base --remote_executor=grpcs://remotebuildexecution.googleapis.com
common:rbe_base --remote_timeout=3600
common:rbe_base --spawn_strategy=remote,worker,standalone,local

# Attempt to minimize the amount of data transfer between bazel and the remote
# workers:
common:rbe_base --remote_download_toplevel
test:rbe_base --test_env=USER=anon

common:rbe_linux --config=rbe_base
common:rbe_linux --action_env=PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin"
# Non-rbe settings we should include because we do not run configure
common:rbe_linux --config=avx_linux
common:rbe_linux --linkopt=-lrt
common:rbe_linux --host_linkopt=-lrt
common:rbe_linux --linkopt=-lm
common:rbe_linux --host_linkopt=-lm

common:rbe_linux_cpu --config=rbe_linux
# Linux cpu and cuda builds share the same toolchain now.
common:rbe_linux_cpu --extra_execution_platforms="@ml_build_config_platform//:platform"
common:rbe_linux_cpu --host_platform="@ml_build_config_platform//:platform"
common:rbe_linux_cpu --platforms="@ml_build_config_platform//:platform"
# This is needed for all Clang17 builds but must not be present in GCC builds.
common:rbe_linux_cpu --copt=-Wno-error=unused-command-line-argument
# These you may need to change for your own GCP project.
common:rbe_linux_cpu --remote_instance_name=projects/tensorflow-testing/instances/default_instance
# END LITERT REMOTE BUILD EXECUTION OPTIONS

common:rbe_linux_cpu_clang_local --config=rbe_linux_cpu
common:rbe_linux_cpu_clang_local --config=clang_local
common:rbe_linux_cpu_clang_local --host_crosstool_top="@local_config_cuda//crosstool:toolchain"
common:rbe_linux_cpu_clang_local --crosstool_top="@local_config_cuda//crosstool:toolchain"
common:rbe_linux_cpu_clang_local --extra_toolchains="@local_config_cuda//crosstool:toolchain-linux-x86_64"
common:rbe_linux_cpu_clang_local --repo_env=CC="/usr/lib/llvm-18/bin/clang"

# Filters used when building in bulk in cpu.
common:bulk_build_cpu --build_tag_filters=-no_oss,-oss_serial,-gpu,-tpu,-v1only
common:bulk_test_cpu --show_timestamps
common:bulk_test_cpu --experimental_ui_max_stdouterr_bytes=3145728

# Filters used when testing in bulk in cpu.
test:bulk_test_cpu --config=bulk_build_cpu
test:bulk_test_cpu --test_tag_filters=-no_oss,-oss_serial,-gpu,-tpu,-v1only,-benchmark-test
test:bulk_test_cpu --test_summary=short
test:bulk_test_cpu --test_output=errors
test:bulk_test_cpu --verbose_failures=true
test:bulk_test_cpu --flaky_test_attempts=3
test:bulk_test_cpu --build_tests_only

# TODO: b/397625618 Enable bzlmod
common --noenable_bzlmod

# BEGIN-INTERNAL
# Flags for tensorflow source rules to use local_repository rather than http_archive.
# NOTE: due to bazel caching, when switching from http_archive to local_repository,
# do a bazel clean --expunge --async before building or use the
# flag --override_repository=org_tensorflow=$TF_LOCAL_SOURCE_PATH
common:use_local_tf --action_env=USE_LOCAL_TF=true
common:use_local_tf --action_env=TF_LOCAL_SOURCE_PATH
# END-INTERNAL
