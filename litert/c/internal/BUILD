# Copyright 2025 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# copybara:uncomment_begin(google-only)
# load("@rules_cc//cc:cc_library.bzl", "cc_library")
# load("@rules_cc//cc:cc_test.bzl", "cc_test")
# copybara:uncomment_end

package(
    # copybara:uncomment default_applicable_licenses = ["@org_tensorflow//tensorflow:license"],
    default_visibility = [
        # copybara:uncomment_begin(oss litert_lm)
        # "//litert/c:__subpackages__",
        # "//litert/cc:__subpackages__",
        # "//litert/test:__subpackages__",
        # "//litert/runtime:__pkg__",
        # "//litert/runtime/accelerators:__subpackages__",
        # "//litert/runtime/dispatch:__subpackages__",
        # "//litert/vendors/c:__subpackages__",
        # copybara:uncomment_end_and_comment_begin
        "//visibility:public",
        # copybara:comment_end
    ],
)

cc_library(
    name = "litert_accelerator",
    srcs = ["litert_accelerator.cc"],
    hdrs = ["litert_accelerator.h"],
    deps = [
        "//litert/c:litert_common",
        "//litert/cc:litert_expected",
        "//litert/core:environment",
        "//litert/runtime:accelerator",
    ],
)

cc_test(
    name = "litert_accelerator_test",
    srcs = ["litert_accelerator_test.cc"],
    deps = [
        ":litert_accelerator",
        ":litert_accelerator_registration",
        "//litert/c:litert_common",
        "//litert/c:litert_environment",
        "//litert/cc:litert_expected",
        "//litert/cc:litert_macros",
        "//litert/runtime:accelerator",
        "//litert/test:matchers",
        "@com_google_absl//absl/strings:string_view",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "litert_accelerator_registration",
    srcs = ["litert_accelerator_registration.cc"],
    hdrs = ["litert_accelerator_registration.h"],
    deps = [
        "//litert/c:litert_common",
        "//litert/c:litert_metrics",
        "//litert/c:litert_opaque_options",
        "//litert/cc:litert_expected",
        "//litert/core:environment",
        "//litert/runtime:accelerator",
        "//litert/runtime:accelerator_registry",
    ],
    # Keep the symbols in libLiteRtRuntimeCApi.dylib.
    alwayslink = 1,
)

cc_test(
    name = "litert_accelerator_registration_test",
    srcs = ["litert_accelerator_registration_test.cc"],
    deps = [
        ":litert_accelerator_registration",
        "//litert/c:litert_common",
        "//litert/c:litert_environment",
        "//litert/c:litert_opaque_options",
        "//litert/runtime:accelerator",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_library(
    name = "litert_dispatch_delegate",
    hdrs = ["litert_dispatch_delegate.h"],
    deps = [
        "//litert/c:litert_common",
        "//litert/c:litert_environment_options",
        "//litert/c:litert_metrics",
        "//litert/runtime/dispatch:dispatch_delegate",
        "//litert/vendors/c:litert_dispatch_c_api",
        "//tflite/c:c_api",
        "//tflite/c:c_api_opaque",
        "//tflite/c:c_api_types",
        "//tflite/c:common",
        "//tflite/delegates/utils:simple_opaque_delegate",
    ],
)

cc_library(
    name = "litert_tensor_buffer_registry_header",
    hdrs = ["litert_tensor_buffer_registry.h"],
    deps = [
        "//litert/c:litert_common",
        "//litert/c:litert_custom_tensor_buffer",
        "//litert/c:litert_tensor_buffer_types",
    ],
)

cc_library(
    name = "litert_tensor_buffer_registry",
    srcs = ["litert_tensor_buffer_registry.cc"],
    hdrs = ["litert_tensor_buffer_registry.h"],
    visibility = [
        # copybara:uncomment_begin(oss litert_lm)
        # "//litert/c:__subpackages__",
        # "//litert/cc:__subpackages__",
        # "//litert/cc/internal:__subpackages__",
        # "//litert/runtime:__subpackages__",
        # "//third_party/odml/litert_lm/runtime/executor:__pkg__",
        # copybara:uncomment_end_and_comment_begin
        "//visibility:public",
        # copybara:comment_end
    ],
    deps = [
        "//litert/c:litert_common",
        "//litert/c:litert_custom_tensor_buffer",
        "//litert/c:litert_tensor_buffer_types",
        "//litert/cc:litert_macros",
        "//litert/runtime:tensor_buffer_registry",
    ],
    # Keep the symbols in libLiteRtRuntimeCApi.dylib.
    alwayslink = 1,
)

# Collection of headers for dispatch APIs.
# Warning: Do not use this target to include common C API headers. Use individual targets instead.
cc_library(
    name = "litert_dispatch_headers",
    hdrs = [
        # Internal C API headers.
        ":litert_accelerator.h",
        ":litert_accelerator_registration.h",
        ":litert_dispatch_delegate.h",
        ":litert_external_litert_buffer_context.h",
        ":litert_tensor_buffer_registry.h",
        "//litert/c:litert_any.h",
        "//litert/c:litert_common.h",
        "//litert/c:litert_compiled_model.h",
        "//litert/c:litert_custom_tensor_buffer.h",
        "//litert/c:litert_custom_op_kernel.h",
        "//litert/c:litert_environment.h",
        "//litert/c:litert_environment_options.h",
        "//litert/c:litert_event.h",
        "//litert/c:litert_event_type.h",
        "//litert/c:litert_gl_types.h",
        "//litert/c:litert_layout.h",
        "//litert/c:litert_logging.h",
        "//litert/c:litert_metrics.h",
        "//litert/c:litert_model_types.h",
        "//litert/c:litert_op_code.h",
        "//litert/c:litert_op_options.h",
        "//litert/c:litert_opaque_options.h",
        "//litert/c:litert_options.h",
        "//litert/c:litert_platform_support.h",
        "//litert/c:litert_tensor_buffer.h",
        "//litert/c:litert_tensor_buffer_requirements.h",
        "//litert/c:litert_tensor_buffer_types.h",
        # Needed for litert/c/litert_op_code.h
        "//tflite:builtin_ops.h",
        # Needed for litert/c/litert_model.h
        "//tflite/c:tensorflowlite_c_api_hdrs_filegroup",
        "//tflite/c:tensorflowlite_c_impl_hdrs_filegroup",
    ],  # Export all header files (.h) in this directory
    visibility = [
        "//litert/runtime:__pkg__",  # Temporaray only for metal_memory
        "//litert/runtime/dispatch:__pkg__",
        "//litert/vendors/c:__pkg__",
    ],
    deps = [
        "//tflite/core/api",
        "//tflite/profiling:memory_info",
        "@com_google_absl//absl/types:span",
        "@opencl_headers",
    ],
)

cc_library(
    name = "litert_external_litert_buffer_context",
    srcs = ["litert_external_litert_buffer_context.cc"],
    hdrs = ["litert_external_litert_buffer_context.h"],
    deps = [
        ":litert_dispatch_headers",
        "//litert/c:litert_common",
        "//litert/cc:litert_macros",
        "//litert/runtime:external_litert_buffer_context",
        "//tflite/c:common",
    ],
)

exports_files(srcs = glob(["litert_*.h"]))

filegroup(
    name = "internal_headers",
    srcs = glob(["litert_*.h"]),
    visibility = [
        "//litert/c:__pkg__",
        "//litert/cc:__pkg__",
    ],
)
