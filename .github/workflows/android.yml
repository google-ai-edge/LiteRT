name: "Android CI"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  host_build:
    name: "Host Build (Ubuntu)"
    runs-on: ubuntu-latest
    timeout-minutes: 90
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang ninja-build

      - name: Install specific CMake version
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.28.1/cmake-3.28.1-linux-x86_64.sh -O cmake_install.sh
          mkdir cmake-install
          sh cmake_install.sh --prefix=./cmake-install --skip-license
          echo "$(realpath ./cmake-install/bin)" >> $GITHUB_PATH
          cmake --version

      - name: Cache Host Build
        id: cache-host-build
        uses: actions/cache@v4
        with:
          path: litert/cmake_build_host
          key: ${{ runner.os }}-host-build-${{ hashFiles('litert/**', 'litert/CMakeLists.txt', 'litert/CMakePresets.json') }}
          restore-keys: |
            ${{ runner.os }}-host-build-

      - name: Build LiteRT Host Targets
        if: steps.cache-host-build.outputs.cache-hit != 'true'
        run: |
          set -e
          cd litert
          cmake --preset default
          cmake --build cmake_build_host -j --target run_model apply_plugin_main

      - name: Upload Host Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: host-build
          path: litert/cmake_build_host/

  cross_compile_android:
    name: "Cross-Compile for Android"
    runs-on: ubuntu-latest
    needs: host_build
    timeout-minutes: 90
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang ninja-build

      - name: Install specific CMake version
        run: |
          wget https://github.com/Kitware/CMake/releases/download/v3.28.1/cmake-3.28.1-linux-x86_64.sh -O cmake_install.sh
          mkdir cmake-install
          sh cmake_install.sh --prefix=./cmake-install --skip-license
          echo "$(realpath ./cmake-install/bin)" >> $GITHUB_PATH
          cmake --version

      - name: Download Host Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: host-build
          path: host-build/

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: ./ndk
          key: ${{ runner.os }}-android-ndk-r26b

      - name: Install Android NDK
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          ANDROID_NDK_FILENAME=android-ndk-r26b-linux.zip
          wget -q https://dl.google.com/android/repository/${ANDROID_NDK_FILENAME}
          unzip -q ${ANDROID_NDK_FILENAME} -d ./ndk
          rm ${ANDROID_NDK_FILENAME}

      - name: Set Android NDK Path
        run: |
          NDK_PATH=$(find $PWD/ndk -maxdepth 1 -type d -name "android-ndk-*")
          echo "ANDROID_NDK_HOME=${NDK_PATH}" >> $GITHUB_ENV
          echo "Found NDK at ${NDK_PATH}"

      - name: Cache Android Build
        id: cache-android-build
        uses: actions/cache@v4
        with:
          path: litert/cmake_build_android_arm64
          key: ${{ runner.os }}-android-build-${{ hashFiles('litert/**', 'litert/CMakeLists.txt', 'litert/CMakePresets.json') }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      - name: Build LiteRT Android Targets
        if: steps.cache-android-build.outputs.cache-hit != 'true'
        run: |
          set -e
          cd litert
          # The host tools (like flatc) are needed for cross-compilation.
          # We point to the host build directory where they were built.
          HOST_TOOLS_DIR_PATH="$GITHUB_WORKSPACE/host-build/tflite/flatc-native-build"

          cmake --preset android-arm64 -DTFLITE_HOST_TOOLS_DIR="${HOST_TOOLS_DIR_PATH}"
          cmake --build cmake_build_android_arm64 -j --target litert_runtime_c_api_shared_lib dispatch_api_MediaTek_so dispatch_api_Qualcomm_so run_model apply_plugin_main VERBOSE=1
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}

      - name: Upload Android Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: litert/cmake_build_android_arm64/
