name: "windows_x86_64"
on:
  push:
    tags:
    - v*.*.*
  pull_request:
    branches:
    - main
  schedule:
    - cron: "0 10 * * *"  # Run at 2am PST (10am UTC) every day to refresh the cache.
  workflow_dispatch:
    inputs:
      REFRESH_CACHE:
        description: 'Refresh cache to remove unused files'
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  presubmit:
    name: "Presubmit-Windows"
    runs-on: windows-latest
    permissions:
      actions: write
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
      REFRESH_CACHE: ${{ github.event_name == 'schedule' ||
                         (github.event_name == 'workflow_dispatch' && inputs.REFRESH_CACHE) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure tensorflow & python path
        run: |
          $env:PYTHON_BIN_PATH = $(python -c "import sys; print(sys.executable)")
          $env:PYTHON_LIB_PATH = $(python -c "import site; print(site.getsitepackages()[0])")
          $env:TF_NEED_ROCM = 0
          $env:TF_NEED_CUDA = 0
          $env:TF_SET_ANDROID_WORKSPACE = 0
          $env:CC_OPT_FLAGS = '-Wno-sign-compare'
          python configure.py
        shell: pwsh

      - name: Set up cache keys
        id: cache-keys
        run: |
          $CACHE_RESTORE_KEY_2 = "${{ github.workflow }}"
          $CACHE_RESTORE_KEY_1 = "$CACHE_RESTORE_KEY_2-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}"
          $CACHE_RESTORE_KEY_0 = "$CACHE_RESTORE_KEY_1-${{ hashFiles('**/BUILD*') }}"
          $CACHE_RESTORE_KEY_HEAD = "$CACHE_RESTORE_KEY_0-${{ github.event.pull_request.base.sha }}"
          $CACHE_KEY = "$CACHE_RESTORE_KEY_0-${{ github.sha }}"
          echo "CACHE_RESTORE_KEY_2=$CACHE_RESTORE_KEY_2" >> $env:GITHUB_OUTPUT
          echo "CACHE_RESTORE_KEY_1=$CACHE_RESTORE_KEY_1" >> $env:GITHUB_OUTPUT
          echo "CACHE_RESTORE_KEY_0=$CACHE_RESTORE_KEY_0" >> $env:GITHUB_OUTPUT
          echo "CACHE_RESTORE_KEY_HEAD=$CACHE_RESTORE_KEY_HEAD" >> $env:GITHUB_OUTPUT
          echo "CACHE_KEY=$CACHE_KEY" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Clean build outputs if cache is being refreshed.
        if: env.REFRESH_CACHE == 'true'
        run: bazel clean --expunge

      - name: Restore bazel cache if cache is not being refreshed.
        id: bazel-cache
        if: env.REFRESH_CACHE != 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            C:\Users\runneradmin\.cache\bazel
          key: ${{ steps.cache-keys.outputs.CACHE_KEY }}
          restore-keys: |
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_HEAD }}
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_0 }}-
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_1 }}-
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_2 }}-

      - name: Check cache hit
        run: |
          echo "Cache Hit: ${{ steps.bazel-cache.outputs.cache-hit }}"
          echo "Cache Primary Key: ${{ steps.bazel-cache.outputs.cache-primary-key }}"
          echo "Cache Matched Key: ${{ steps.bazel-cache.outputs.cache-matched-key }}"
        shell: pwsh

      - name: Run bazel build on Windows
        run: |
          bazel test --config=bulk_test_cpu --test_lang_filters=cc,py --keep_going --repo_env=USE_PYWRAP_RULES=True -- //litert/... -//litert/c:litert_compiled_model_shared_lib_test -//litert/c:litert_compiled_model_test -//litert/cc:litert_compiled_model_test -//litert/cc:litert_environment_test -//litert/runtime:compiled_model_test -//litert/tools:tool_display_test -//litert/tools:dump_test -//litert/tools:apply_plugin_test -//litert/vendors/intel_openvino/...
        shell: pwsh

      - name: Remove cache if cache is being refreshed.
        if: env.REFRESH_CACHE == 'true'
        continue-on-error: true
        run: gh cache delete ${{ steps.cache-keys.outputs.CACHE_KEY }}

      - name: Save bazel cache if it's new or being refreshed.
        uses: actions/cache/save@v4
        if: env.REFRESH_CACHE == 'true' || steps.bazel-cache.outputs.cache-hit != 'true'
        with:
          path: |
            C:\Users\runneradmin\.cache\bazel
          key: ${{ steps.cache-keys.outputs.CACHE_KEY }}
