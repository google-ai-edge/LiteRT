name: "windows_x86_64"
on:
  push:
    tags:
    - v*..
  pull_request:
    branches:
    - main
  schedule:
    - cron: "0 10 * * *"  # Run at 2am PST (10am UTC) every day to refresh the cache.
  workflow_dispatch:  # Manual trigger
    inputs:
      REFRESH_CACHE:
        description: 'Refresh cache to remove unused files'
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  presubmit:
    name: "Presubmit-Win"
    runs-on: Windows_x64  # Latest high spec runner ((96 cores and 384GB RAM)).
    permissions:
      actions: write  # For gh cache delete.
      contents: read
    env:
      # Clear ANDROID_NDK_HOME as windows-latest has NDK where jobs don't have permission for
      # androidndk rulesto create symlinks.
      ANDROID_NDK_HOME:
      LITERT_MODELS: ""
      GH_TOKEN: ${{ github.token }}
      REFRESH_CACHE: ${{ github.event_name == 'schedule' ||
                         (github.event_name == 'workflow_dispatch' && inputs.REFRESH_CACHE) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Configure tensorflow & python path
        run: |
          $env:PYTHON_BIN_PATH = (Get-Command python).Source
          $env:PYTHON_LIB_PATH = (python -c 'import site; print(site.getsitepackages()[0])')
          $env:TF_NEED_ROCM = 0
          $env:TF_NEED_CUDA = 0
          $env:TF_SET_ANDROID_WORKSPACE = 0
          $env:CC_OPT_FLAGS = '-Wno-sign-compare'
          python configure.py

      - name: Setup Android SDK and NDK
        # This action automatically handles downloading, licensing, and setting ANDROID_SDK_ROOT
        uses: android-actions/setup-android@v3
        with:
          # Install the necessary API platform and NDK version
          # You may need to adjust these versions based on your Bazel WORKSPACE file
          sdk-version: 34
          ndk: 25.1.8937393 # Example NDK version, update if needed
          
      - name: Display Android SDK path
        # Optional: Print the path to confirm it is set. 
        # This is typically where your WORKSPACE file should point.
        run: |
          echo "ANDROID_SDK_ROOT is set to: $env:ANDROID_SDK_ROOT"
          
      - name : Set up cache keys and bazel output base.
        id: cache-keys
        run: |
          $CACHE_RESTORE_KEY_2="${{ github.workflow }}"
          $CACHE_RESTORE_KEY_1="$CACHE_RESTORE_KEY_2-${{ hashFiles('**/WORKSPACE', '**/.bazelrc') }}"
          $CACHE_RESTORE_KEY_0="$CACHE_RESTORE_KEY_1-${{ hashFiles('**/BUILD*') }}"
          # If it's not a pull request, then it will be the same as $CACHE_RESTORE_KEY_1-.
          $CACHE_RESTORE_KEY_HEAD="$CACHE_RESTORE_KEY_0-${{ github.event.pull_request.base.sha }}"
          $CACHE_KEY="$CACHE_RESTORE_KEY_0-${{ github.sha }}"
          echo "CACHE_RESTORE_KEY_2=$CACHE_RESTORE_KEY_2" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_RESTORE_KEY_1=$CACHE_RESTORE_KEY_1" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_RESTORE_KEY_0=$CACHE_RESTORE_KEY_0" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_RESTORE_KEY_HEAD=$CACHE_RESTORE_KEY_HEAD" >> "$env:GITHUB_OUTPUT"
          echo "CACHE_KEY=$CACHE_KEY" >> "$env:GITHUB_OUTPUT"
          # D: is faster than C: for I/O.
          $SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))
          echo "BAZEL_OUTPUT_BASE=D:/w-$SHORT_SHA" >> "$env:GITHUB_ENV"
          
      - name: Clean build outputs if cache is being refreshed.
        if: env.REFRESH_CACHE == 'true'
        run: bazel --output_base="$env:BAZEL_OUTPUT_BASE" clean --expunge

      - name: Restore bazel cache if cache is not being refreshed.
        id: bazel-cache
        if: env.REFRESH_CACHE != 'true'
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/bazel-windows
          key: ${{ steps.cache-keys.outputs.CACHE_KEY }}
          restore-keys: |
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_HEAD }}
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_0 }}-
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_1 }}-
            ${{ steps.cache-keys.outputs.CACHE_RESTORE_KEY_2 }}-
            
      - name: Check cache hit
        run: |
          echo "Cache Hit: ${{ steps.bazel-cache.outputs.cache-hit }}"
          echo "Cache Primary Key: ${{ steps.bazel-cache.outputs.cache-primary-key }}"
          echo "Cache Matched Key: ${{ steps.bazel-cache.outputs.cache-matched-key }}"
          
      - name: Run bazel test
        run: |
          bazel test --disk_cache=~/.cache/bazel-windows --config=windows `
            --action_env=ANDROID_SDK_ROOT=$env:ANDROID_SDK_ROOT `
            -- //litert/...
         
      - name: Remove cache if cache is being refreshed.
        if: env.REFRESH_CACHE == 'true'
        continue-on-error: true  # Ignore errors when cache is not found.
        run: gh cache delete ${{ steps.cache-keys.outputs.CACHE_KEY }}

      - name: Save bazel cache if it's new or being refreshed.
        uses: actions/cache/save@v4
        if: env.REFRESH_CACHE == 'true' || steps.bazel-cache.outputs.cache-hit != 'true'
        with:
          path: ~/.cache/bazel-windows
          key: ${{ steps.cache-keys.outputs.CACHE_KEY }}
